{"name":"Naorobot-tracknpickup","tagline":"Nao robot program that tracks and picks up an object","body":"### Welcome to GitHub Pages.\r\nusing Nao choregraphe 2.1.2 this is a program for nao to track a yellow ball and pick it up\r\n\r\nFLOW diagram for choregraphe 2.1.2 is(each on is a box)\r\n\r\nAlmemory(leftfootbumperpressed) -> OnlyOnce(a) -> (inputOnStart) tracker -> (inputOnstart)Tracker ->(inputOnstart)Search\r\nOnlyOnce(a) -> Openhands -> (inputOnStart)Timeline(grabs motion) -> (inputOnStart)MoveTo -> Exit\r\nAlMemory(colorblobdetected) -> ONlyOnce(b) -> (OnStopInput)Search\r\nAutoControl\r\n\r\ntracking code:\r\n\r\nfrom naoqi import ALProxy\r\n\r\nclass MyClass(GeneratedClass):\r\n    def __init__(self):\r\n        GeneratedClass.__init__(self)\r\n        self.text = ALProxy(\"ALTextToSpeech\")\r\n        self.tracker = ALProxy(\"ALTracker\")\r\n        self.posture = ALProxy(\"ALRobotPosture\")\r\n        self.move =ALProxy(\"ALMotion\")\r\n        self.color = ALProxy(\"ALColorBlobDectection\")\r\n\r\n        self.color.setColor(216,225,16,50)\r\n        self.color.setObjectProperties(15,.050,\"Circle\")\r\n\r\n    def onLoad(self):\r\n        names = ['HeadYaw','HeadPitch']\r\n        times = [[2.0],[2,0]]\r\n        self.text.say(\"Hi guy\")\r\n        event = \"ALTracker/ColorBlobDetected\"\r\n        self.posture.goToPosture(\"StandInit\",0.5)\r\n\r\n        self.tracker.setMode(\"Move\")\r\n        self.tracker.setRelativePosition([0.4,0.0,0.0,0.1,0.1,0.3])\r\n        self.tracker.trackEvent(event)\r\n        self.move.angleInterpolation(names,[0.0,0.3],times,True)\r\n        self.text.say(\"Looking for the ball\")\r\n        self.onStopped()\r\n        #put initialization code here\r\n\r\n        pass\r\n\r\n    def onUnload(self):\r\n        self.tracker.stopTracker()\r\n        self.posture.goToPosture(\"StandInit\",0.5)\r\n        self.text.say(\"I'm done\")\r\n        self.tracker.toggleSearch(False)\r\n        #put clean-up code here\r\n        pass\r\n\r\n    def onInput_onStart(self):\r\n        self.tracker.stopTracker()\r\n        pass\r\n\r\n    def onInput_onStop(self):\r\n\r\n        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped\r\n        self.onStopped() #activate the output of the box\r\n\r\nSearch Code:\r\n\r\nfrom naoqi import ALProxy\r\nclass MyClass(GeneratedClass):\r\n    def __init__(self):\r\n        GeneratedClass.__init__(self)\r\n        self.text = ALProxy(\"ALTextToSpeech\")\r\n        self.move =ALProxy(\"ALMotion\")\r\n        self.color = ALProxy(\"ALColorBlobDectection\")\r\n\r\n        self.color.setColor(216,225,16,50)\r\n        self.color.setObjectProperties(15,.050,\"Circle\")\r\n\r\n    def onLoad(self):\r\n        #put initialization code here\r\n        pass\r\n\r\n    def onUnload(self):\r\n        #put clean-up code here\r\n        pass\r\n\r\n    def onInput_onStart(self):\r\n        #self.onStopped() #activate the output of the box\r\n        names = ['HeadYaw','HeadPitch']\r\n        times = [[2.0],[2,0]]\r\n        self.move.angleInterpolation(names,[0.0,0.3],times,True)\r\n        p = False\r\n        self.stopIt(p)\r\n        self.move.angleInterpolation(names,[0.0,0.1],times,True)\r\n        self.onStopped()\r\n        pass\r\n\r\n    def onInput_onStop(self):\r\n        self.stopIt(True)\r\n        #self.onUnload() #it is recommended to reuse the clean-up as the box is stopped\r\n        #self.onStopped() #activate the output of the box\r\n\r\n    def stopIt(self,p):\r\n        names = ['HeadYaw','HeadPitch']\r\n        times = [[2.0],[2,0]]\r\n        count = 0\r\n        if p == True:\r\n            self.text.say(\"found the ball\")\r\n\r\n        while p == False;\r\n            self.move.angleInterpolation(names,[1.0,0.3],times,True)\r\n            self.move.angleInterpolation(names,[-1.0,0.3],times,True)\r\n        count = count+1\r\n        if count == 3:\r\n            p = True\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}