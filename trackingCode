from naoqi import ALProxy

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.text = ALProxy("ALTextToSpeech")
        self.tracker = ALProxy("ALTracker")
        self.posture = ALProxy("ALRobotPosture")
        self.move =ALProxy("ALMotion")
        self.color = ALProxy("ALColorBlobDectection")

        self.color.setColor(216,225,16,50)
        self.color.setObjectProperties(15,.050,"Circle")

    def onLoad(self):
        names = ['HeadYaw','HeadPitch']
        times = [[2.0],[2,0]]
        self.text.say("Hi guy")
        event = "ALTracker/ColorBlobDetected"
        self.posture.goToPosture("StandInit",0.5)

        self.tracker.setMode("Move")
        self.tracker.setRelativePosition([0.4,0.0,0.0,0.1,0.1,0.3])
        self.tracker.trackEvent(event)
        self.move.angleInterpolation(names,[0.0,0.3],times,True)
        self.text.say("Looking for the ball")
        self.onStopped()
        #put initialization code here

        pass

    def onUnload(self):
        self.tracker.stopTracker()
        self.posture.goToPosture("StandInit",0.5)
        self.text.say("I'm done")
        self.tracker.toggleSearch(False)
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.tracker.stopTracker()
        pass

    def onInput_onStop(self):

        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box
